# This -*- makefile -*- is part of Marionnet, a virtual network laboratory
# Copyright (C) 2008  Luca Saiu
# Updated in 2008 by Marco Stronati

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


COMPILE_OPTIONS += -g
DIRECTORIES_TO_INCLUDE = threads lablgtk2 lablglade ocamlbricks
LIBRARIES_TO_LINK = unix threads str lablgtk lablglade ocamlbricks
C_OBJECTS_TO_LINK += gettext-c-wrapper

PP_OPTION = camlp4of extract_pot.p4.cmo

OBJECTS_TO_LINK = gtkThread
BYTE_PROGRAMS = marionnet.byte chip_example.byte chip_example.expanded.ml chip_example.expanded.byte
ROOT_BYTE_PROGRAMS = marionnet-daemon.byte

BYTE_PROGRAMS += gettext-example.byte

# To do: these should be enabled for release, but they take too long to
# build every time...
#NATIVE_PROGRAMS = marionnet.native
#ROOT_NATIVE_PROGRAMS = marionnet-daemon.native

#ROOT_PROGRAMS = marionnet-daemon.byte marionnet-daemon.native
OTHER_PROGRAMS_TO_INSTALL = scripts/marionnet-can-directory-host-sparse-files

main-local: _build/gettext-c-wrapper.o

# Before building the main targets we have to create the machine-generated
# sources:
chip_example.byte : chip/chip_example.ml _build/chip_parser.p4.cmo


chip_example.expanded.byte : chip_example.expanded.ml
	cd _build ; ocamlc -thread -pp camlp4rf -I chip -I . -I +threads threads.cma chip.cmo  $< -o $@

marionnet.byte marionnet.native : _build/chip_parser.p4.cmo _build/include_type_definitions.p4.cmo _build/extract_pot.p4.cmo version.ml gui.ml _build/gettext-c-wrapper.o

_build/include_type_definitions.p4.cmo: include_type_definitions.p4.ml
	@mkdir _build/ 2>/dev/null || true
	cp $< _build/
	cd _build ; ocamlc -c -pp camlp4of -I +camlp4 $<

_build/chip_parser.p4.cmo: chip/chip_parser.p4.ml
	@mkdir -p _build/chip/ 2>/dev/null || true
	cp $< _build/
	cd _build ; ocamlc -c -I +camlp4 -pp camlp4of camlp4lib.cma chip_parser.p4.ml

_build/extract_pot.p4.cmo: gettext/extract_pot.p4.ml
	@mkdir -p _build/ 2>/dev/null || true
	cp $< _build/
	cd _build ; ocamlc -c -I +camlp4 -pp camlp4of camlp4lib.cma extract_pot.p4.ml

run: marionnet.byte
	(export WORKING=`pwd`; OCAMLRUNPARAM="b" $$WORKING/_build/marionnet.byte) | tee /tmp/LOG

runexam: marionnet.byte
	(export WORKING=`pwd`; OCAMLRUNPARAM="b" $$WORKING/_build/marionnet.byte --exam) | tee /tmp/LOG

runopt: marionnet.native
	(export WORKING=`pwd`; $$WORKING/_build/marionnet.native) | tee /tmp/LOG

run-daemon: marionnet-daemon.byte
	sudo _build/marionnet-daemon.byte

# version.ml is automatically generated:
version.ml: VERSION BUILD-TIME
	@(echo -e "(* This file is automatically generated. Please don't edit it. *)" > $@; \
	echo -e "" >> $@; \
	echo -en "let version = \"" >> $@; \
	for x in `cat VERSION`; do echo -n "$$x" >> $@; done; \
	echo -e "\";;" >> $@; \
	echo -en "let build_time = \"" >> $@; \
	for x in `cat BUILD-TIME`; do echo -n "$$x " >> $@; done; \
	echo -e "\";;" >> $@)

VERSION: META
	@($(call READ_META, name, version); \
	echo "$$version" > $@)

BUILD-TIME:
	@(echo 'built in '`date +"%B %Y"` > $@)

# We need to patch the file generated by Glade, so that image pathnames
# follow our conventions:
share/gui.glade.patched: gui/gui.xml VERSION BUILD-TIME
	@(cat gui/gui.xml | \
	sed s/name=\"pixbuf\"\>/name=\"pixbuf\"\>images\\//g | \
	sed s/name=\"icon\"\>/name=\"icon\"\>images\\//g | \
	sed "s/QQVERSIONQQ/`cat VERSION`/g" | \
	sed "s/QQDATEQQ/`cat BUILD-TIME`/g" > $@)

# This is the name of the Glade->OCaml code generator:
GLADE2ML = lablgladecc2

# gui.ml is automatically generated from the patched Glade file:
gui.ml: share/gui.glade.patched
#	@(cd share; $(GLADE2ML) -embed gui.glade.patched > ../$@)
	@(cd share; $(GLADE2ML) gui.glade.patched > ../$@)

gui-help: gui.ml
	ocamlc -i -I +lablgtk2 lablgtk.cma gui.ml | grep -v "val" | grep -v "[0-9]"

# Clean all the automatically-generated sources:
clean-local: clean-mo
	@(rm -f VERSION BUILD-TIME version.ml; \
	rm -f share/gui.glade.patched gui.ml)

edit:
	test -n $$EDITOR && $$EDITOR Makefile.local $$(find . gui chip -maxdepth 1 -name "*.ml" -o -name "*.mli") &

# ==============gettext stuff=============

install-local: install-mo
uninstall-local: uninstall-mo

# A trivial example of how to use our gettext wrapper:
gettext-example.byte : gettext/gettext-example.ml

# How to build the trivial C module:
_build/gettext-c-wrapper.o: gettext/gettext-c-wrapper.c
	(mkdir _build &> /dev/null || true) && \
	gcc -g -O3 -o $@ -c $^

chip_example.expanded.ml : chip/chip_example.ml _build/chip_parser.p4.cmo
	cp chip/chip_example.ml _build/
	#cd _build ; camlp4of -o $@  chip_parser.p4.cmo chip_example.ml # bug in ocaml 3.10.0 (ubuntu)
	cd _build ; camlp4of -printer Camlp4OCamlRevisedPrinter -o $@  chip_parser.p4.cmo chip_example.ml

_build/marionnet.pot: marionnet.byte
	msgcat --use-first $(shell find _build/ -name "*.ml.pot") > $@

pot: _build/marionnet.pot
	cp _build/marionnet.pot po/messages.pot

# Useful to discover widgets containing translatable strings
gui.po: gui/gui.xml
	xml2po $< > /tmp/$@
	@echo "Generated file: /tmp/$@"

#this could be extracted from po/LINGUAS
LANGUAGES = it fr

compile-mo: 
	cd po/; \
	for i in $(LANGUAGES); do msgfmt $$i.po; mv messages.mo $$i.mo; done;

update-po: pot
	cd po/; \
	for i in $(LANGUAGES); do msgmerge --no-fuzzy-matching --sort-by-file --update $$i.po messages.pot;done;	

install-mo: compile-mo
	cd po/; \
	for i in $(LANGUAGES); do cp $$i.mo /usr/share/locale/$$i/LC_MESSAGES/marionnet.mo; done;

clean-mo:
	@(cd po/; \
	rm -rf *.mo *~ *.pot;)

uninstall-mo:
	for i in $(LANGUAGES); do rm -f /usr/share/locale/$$i/LC_MESSAGES/marionnet.mo; done;