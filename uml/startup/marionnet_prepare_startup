#!/bin/sh
# This file is part of Marionnet, a virtual network laboratory
# Copyright (C) 2007  Luca Saiu
# Copyright (C) 2007  Jean-Vincent Loddo

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Perform an indirect lookup of the variable $1'_eth'$2, i.e. return
# the value of the variable which is the value of the variable named
# $1'_eth'$2.

function lookup
{
    echo $(eval echo '$'$1'_eth'$2)
}

echo -n "Preparing the configuration for Marionnet... "

# Read kernel command line variables into this shell's environment:
source /usr/sbin/marionnet_source_cmdline

# Mount the hostfs filesystem:
mount none /mnt/hostfs -t hostfs -o $hostfs

# Add bindings from the hostfs boot_parameters to this shell
# environment:
. /mnt/hostfs/boot_parameters

# Set the hostname according to the kernel command line:
echo $hostname > /etc/hostname
/etc/init.d/hostname.sh start &> /dev/null


# Get the name of the virtual machine version
virtualfs_version=`echo $ubd0s | sed -e 's/.*\/\(.*\)$/\1/'`

# Show the hostname in the terminal window title bar...
echo -en '\033]0;'$hostname '('$virtualfs_version')\a'

# And also record it on the hostfs filesystem, so that we can
# easily tell which guest machine the directory belongs to
# *from the host*:
echo $hostname > /mnt/hostfs/GUESTNAME

# Configure network interfaces:
for i in `seq 0 $(( $ethernet_interfaces_no - 1))`; do
#    mac_address=$(eval echo '$mac_address_eth'$i)
    mac_address=`lookup mac_address $i`
    mtu=`lookup mtu $i` 
    ipv4_address=`lookup ipv4_address $i` 
    ipv4_broadcast=`lookup ipv4_broadcast $i` 
    ipv4_netmask=`lookup ipv4_netmask $i` 
    ipv6_address=`lookup ipv6_address $i` 
    ipv6_broadcast=`lookup ipv6_broadcast $i` 
    ipv6_netmask=`lookup ipv6_netmask $i` 
#    echo -------------------------------------------
    echo -- eth$i:  $mac_address --ipv4: $ipv4_address /  $ipv4_netmask --ipv6: $ipv6_address
#    echo $mtu
#    echo $ipv4_broadcast
#    echo $ipv6_broadcast
#    echo $ipv6_netmask
    ifconfig eth$i hw ether $mac_address
    ifconfig eth$i mtu $mtu
    if [ "A$ipv4_address" != "A" ]; then
     if [ "A$ipv4_netmask" != "A" ]; then
       ifconfig eth$i $ipv4_address netmask $ipv4_netmask
     else
       ifconfig eth$i $ipv4_address
     fi
    fi
    if  [ "A$ipv6_address" != "A" ]; then
       ifconfig eth$i inet6 add $ipv6_address
    fi
#    echo -------------------------------------------
done


# Activate and immediately ghostify our special network
# interface communicating with the host:
ifconfig eth42 $ip42 up &> /dev/null
ghostify eth42 &> /dev/null

function run_x_window_manager {
    while true; do
        sawfish
    done
}

function run_x_clients {
    while true; do
        xterm -ls -name "$hostname"
    done
}

function run_xfce {
    xfce4-session
}


function add_line_if_needed {
    local LINE="$1"
    local FILE="$2"
    
    { test -f "$FILE" && grep -q "^${LINE}$" "$FILE"; } || { 
        bash <<EOF
echo "$LINE" >> "$FILE"
EOF
    }
}

# Add swap (the swap 'partition' was already created as a
# sparse file and initialized with mkswap from the host
# side):
add_line_if_needed \
  "/dev/ubdb       none            swap    sw              0       0" \
  /etc/fstab
swapon -a

# Make a correct entry in /etc/hosts:
add_line_if_needed "127.0.0.1 $hostname" /etc/hosts

# Setup the X session, if requested:
if [ "$xnest_display_number" != "" ]; then
    export PATH=/root/bin:/usr/local/bin:$PATH
    export DISPLAY=172.23.0.254$xnest_display_number
    export HOME=/root
    cd $HOME
#    run_x_window_manager &> /dev/null &
#    run_x_clients &> /dev/null &
    run_xfce&
fi

echo "done."
